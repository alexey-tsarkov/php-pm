<?php

namespace PHPPM;

use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class PPMConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $tree = new TreeBuilder('ppm');

        $tree->getRootNode()
            ->children()
                ->scalarNode('bridge')
                    ->info('Bridge for converting React Psr7 requests to target framework')
                    ->defaultValue('HttpKernel')
                ->end()
                ->scalarNode('host')
                    ->info('Load-Balancer host')
                    ->defaultValue('127.0.0.1')
                ->end()
                ->integerNode('port')
                    ->info('Load-Balancer port')
                    ->min(1)->max(65535)
                    ->defaultValue(8080)
                ->end()
                ->integerNode('workers')
                    ->info('Worker count. Should be minimum equal to the number of CPU cores')
                    ->min(1)
                    ->defaultValue((int)`nproc`)
                ->end()
                ->scalarNode('app-env')
                    ->info('The environment that your application will use to bootstrap (if any)')
                    ->defaultValue('dev')
                ->end()
                ->enumNode('debug')
                    ->info('Enable/Disable debugging so that your application is more verbose, enables also hot-code reloading')
                    ->values([0, 1])
                    ->defaultValue(0)
                ->end()
                ->enumNode('logging')
                    ->info('Enable/Disable http logging to stdout')
                    ->values([0, 1])
                    ->defaultValue(1)
                ->end()
                ->scalarNode('static-directory')
                    ->info('Static files root directory, if not provided static files will not be served')
                    ->defaultValue('')
                ->end()
                ->integerNode('max-requests')
                    ->info('Max requests per worker until it will be restarted')
                    ->min(1)
                    ->defaultValue(1000)
                ->end()
                ->integerNode('max-execution-time')
                    ->info('Maximum amount of time a request is allowed to execute before shutting down')
                    ->min(0)
                    ->defaultValue(30)
                ->end()
                ->integerNode('memory-limit')
                    ->info('Maximum amount of memory a worker is allowed to consume (in MB) before shutting down')
                    ->min(-1)
                    ->defaultValue(-1)
                ->end()
                ->integerNode('ttl')
                    ->info('Time to live for a worker until it will be restarted')
                    ->min(0)
                ->end()
                ->enumNode('populate-server-var')
                    ->info('If a worker application uses $_SERVER var it needs to be populated by request data')
                    ->values([0, 1])
                    ->defaultValue(1)
                ->end()
                ->scalarNode('bootstrap')
                    ->info('Class responsible for bootstrapping the application')
                    ->defaultValue('PHPPM\Bootstraps\Symfony')
                ->end()
                ->scalarNode('cgi-path')
                    ->info('Full path to the php-cgi executable')
                    ->defaultValue(false)
                ->end()
                ->scalarNode('socket-path')
                    ->info('Path to a folder where socket files will be placed. Relative to working-directory or cwd()')
                    ->defaultValue('.ppm/run/')
                ->end()
                ->scalarNode('pidfile')
                    ->info('Path to a file where the pid of the master process is going to be stored')
                    ->defaultValue('.ppm/ppm.pid')
                ->end()
                ->integerNode('reload-timeout')
                    ->info('The number of seconds to wait before force closing a worker during a reload, or -1 to disable')
                    ->min(-1)
                    ->defaultValue(30)
                ->end()
            ->end();

        return $tree;
    }
}
